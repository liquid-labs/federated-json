{"version":3,"file":"index.js","sources":["../node_modules/dotenv/lib/main.js","../src/federated-json.js"],"sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n","/**\n* Library that builds a single JSON object from multiple JSON files. As each file is loaded, we check\n* `_meta/com.liquid-labs.federated-data/mountSpecs`. Each spec consists of a `dataPath` and `dataFile` element. The\n* data path is split on '/' and each element is treated as a string. Therefore, the path is compatible with object keys\n* but does not support arrays.\n*/\nimport * as dotenv from 'dotenv'\nimport * as fs from 'fs'\n\nconst FJSON_DATA_SPACE_KEY = 'com.liquid-labs.federated-json'\n\nconst processPath = (path) => {\n  // eslint-disable-next-line no-template-curly-in-string\n  return path.replace('${LIQ_PLAYGROUND}', process.env.LIQ_PLAYGROUND)\n}\n\n/**\n* Adds or updates a mount point entry. WARNING: This method does not currently support sub-mounts. These must be\n* manually updated by accessing the sub-data structure and modifying it's mount points directly.\n*/\nconst addMountPoint = (data, dataPath, dataFile) => {\n  let mountSpecs = getMountSpecs(data)\n\n  if (mountSpecs === undefined) {\n    mountSpecs = []\n    const myMeta = ensureMyMeta(data)\n    if (myMeta.mountSpecs === undefined) {\n      myMeta.mountSpecs = mountSpecs\n    }\n  }\n\n  const i = mountSpecs.findIndex((el) => el.dataPath === dataPath)\n  const mountSpec = { dataPath : dataPath, dataFile }\n  if (i !== -1) {\n    mountSpecs[i] = mountSpec\n  }\n  else {\n    mountSpecs.push(mountSpec)\n  }\n}\n\n/**\n* Set the 'LIQ_PLAYGROUND' environment variable to the provided `path` or from the standard liq settings. Primarily\n* used for library setup and testing.\n*/\nconst setLiqPlayground = (path) => {\n  if (path !== undefined) {\n    process.env.LIQ_PLAYGROUND = path\n  }\n  else if (!process.env.LIQ_PLAYGROUND) {\n    const envResult = dotenv.config({ path : `${process.env.HOME}/.liq/settings.sh` })\n    if (envResult.error) {\n      throw envResult.error\n    }\n  }\n}\n\n/**\n* Reads a JSON file and processes for federated mount points to construct a composite JSON object from one or more\n* files.\n*/\nconst readFJSON = (filePath, options) => {\n  const { rememberSource } = options || {}\n\n  const processedPath = processPath(filePath)\n  if (!fs.existsSync(processedPath)) {\n    const msg = `No such file: '${filePath}'` + (filePath !== processedPath ? ` ('${processedPath}')` : '')\n    throw new Error(msg)\n  }\n  const dataBits = fs.readFileSync(processedPath)\n  const data = JSON.parse(dataBits)\n\n  if (rememberSource) {\n    setSource(data, filePath)\n  }\n\n  const mountSpecs = getMountSpecs(data)\n  if (mountSpecs) {\n    for (const mntSpec of mountSpecs) {\n      const { dataFile, mountPoint, finalKey } = processMountSpec(mntSpec, data)\n      const subData = readFJSON(dataFile)\n\n      mountPoint[finalKey] = subData\n    }\n  }\n\n  return data\n}\n\n/**\n* Set's the meta source information.\n*/\nconst setSource = (data, filePath) => {\n  const myMeta = ensureMyMeta(data)\n  myMeta.sourceFile = filePath\n}\n\n/**\n* Writes a standard or federated JSON file by analysing the objects meta data and breaking the saved files up\n* accourding to the configuration.\n*/\nconst writeFJSON = (data, filePath) => {\n  if (filePath === undefined) {\n    const myMeta = getMyMeta(data)\n    filePath = myMeta && myMeta.sourceFile\n  }\n  if (!filePath) {\n    throw new Error('No explicit filePath provided and no source found in object meta data.')\n  }\n\n  const mountSpecs = getMountSpecs(data)\n  if (mountSpecs) {\n    for (const mntSpec of mountSpecs) {\n      const { mountPoint, finalKey } = processMountSpec(mntSpec, data)\n\n      const subData = mountPoint[finalKey]\n      mountPoint[finalKey] = null\n\n      writeFJSON(subData, mntSpec.dataFile)\n    }\n  }\n\n  const dataString = JSON.stringify(data)\n  const processedPath = processPath(filePath)\n  fs.writeFileSync(processedPath, dataString)\n}\n\nconst getMyMeta = (data) => data._meta && data._meta[FJSON_DATA_SPACE_KEY]\n\nconst ensureMyMeta = (data) => {\n  let myMeta = getMyMeta(data)\n  if (!myMeta) {\n    if (data._meta === undefined) { data._meta = {} }\n    if (data._meta[FJSON_DATA_SPACE_KEY] === undefined) { data._meta[FJSON_DATA_SPACE_KEY] = {} }\n    myMeta = getMyMeta(data)\n  }\n\n  return myMeta\n}\n\n/**\n* Internal function to test for and extract mount specs from the provided JSON object.\n*/\nconst getMountSpecs = (data) => {\n  const myMeta = getMyMeta(data)\n  return myMeta && myMeta.mountSpecs\n}\n\n/**\n* Internal function to process a mount spec into useful components utilized by the `readFJSON` and `writeFJSON`.\n*/\nconst processMountSpec = (mntSpec, data) => {\n  let { dataPath, dataFile } = mntSpec\n\n  dataFile = processPath(dataFile)\n\n  const pathTrail = dataPath.split('/')\n  const finalKey = pathTrail.pop()\n\n  let mountPoint = data\n  for (const key of pathTrail) {\n    mountPoint = mountPoint[key]\n  }\n\n  return { dataFile, mountPoint, finalKey }\n}\n\nsetLiqPlayground()\n\nexport { addMountPoint, FJSON_DATA_SPACE_KEY, readFJSON, setLiqPlayground, setSource, writeFJSON }\n"],"names":["fs","FJSON_DATA_SPACE_KEY","processPath","path","replace","process","env","LIQ_PLAYGROUND","addMountPoint","data","dataPath","dataFile","mountSpecs","getMountSpecs","undefined","myMeta","ensureMyMeta","i","findIndex","el","mountSpec","push","setLiqPlayground","envResult","dotenv","HOME","error","readFJSON","filePath","options","rememberSource","processedPath","msg","Error","dataBits","JSON","parse","setSource","mntSpec","processMountSpec","mountPoint","finalKey","subData","sourceFile","writeFJSON","getMyMeta","dataString","stringify","_meta","pathTrail","split","pop","key"],"mappings":"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"}