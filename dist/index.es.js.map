{"version":3,"file":"index.es.js","sources":["../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js","../src/lib/utils.js","../src/lib/federated-json.js"],"sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","/**\n* Package internal utility functions.\n*/\nconst replaceRE = /\\$\\{([A-Za-z_][A-Za-z0-9_]*)\\}/g\n\n/**\n* Replaces constructs like '${FOO}' with the environment value of 'FOO' (or whatever key is used). Will raise an\n* exception if no value is found for a given key.\n*/\nconst envTemplateString = (path) => {\n  const origPath = path // used for error messages\n\n  let matches // A replaced var may itself reference vars, so we keep processing until everything is resolved.\n  while ((matches = [...path.matchAll(replaceRE)]).length > 0) {\n    // const matches = [...path.matchAll(replaceRE)]\n    matches.reverse() // The reverse allows us to use the start and end indexes without messing up the string.\n    for (const matchInfo of matches) {\n      const match = matchInfo[0]\n      const key = matchInfo[1]\n      const value = process.env[key]\n      const matchStart = matchInfo.index\n      if (value === undefined) {\n        throw new Error(`No such environment parameter '${key}' found in path replacement: '${origPath}'.`)\n      }\n      path = path.substring(0, matchStart) + value + path.substring(matchStart + match.length)\n    }\n  }\n\n  return path\n}\n\nexport { envTemplateString }\n","/**\n* Library that builds a single JSON object from multiple JSON files. As each file is loaded, we check\n* `_meta/com.liquid-labs.federated-data/mountSpecs`. Each spec consists of a `dataPath` and `dataFile` element. The\n* data path is split on '/' and each element is treated as a string. Therefore, the path is compatible with object keys\n* but does not support arrays.\n*/\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { envTemplateString } from './utils'\n\nconst FJSON_META_DATA_KEY = 'com.liquid-labs.federated-json'\n\n/**\n* Adds or updates a mount point entry. WARNING: This method does not currently support sub-mounts. These must be\n* manually updated by accessing the sub-data structure and modifying it's mount points directly.\n*/\nconst addMountPoint = (data, dataPath, dataFile) => {\n  let mountSpecs = getMountSpecs(data)\n\n  if (mountSpecs === undefined) {\n    mountSpecs = []\n    const myMeta = ensureMyMeta(data)\n    if (myMeta.mountSpecs === undefined) {\n      myMeta.mountSpecs = mountSpecs\n    }\n  }\n\n  const i = mountSpecs.findIndex((el) => el.dataPath === dataPath)\n  const mountSpec = { dataPath : dataPath, dataFile }\n  if (i !== -1) {\n    mountSpecs[i] = mountSpec\n  }\n  else {\n    mountSpecs.push(mountSpec)\n  }\n}\n\nconst jsonRE = /\\.json$/\n\n/**\n* Reads a JSON file and processes for federated mount points to construct a composite JSON object from one or more\n* files.\n*/\nconst readFJSON = (filePath, options) => {\n  const { rememberSource } = options || {}\n\n  const processedPath = envTemplateString(filePath)\n  if (!fs.existsSync(processedPath)) {\n    const msg = `No such file: '${filePath}'` + (filePath !== processedPath ? ` ('${processedPath}')` : '')\n    throw new Error(msg)\n  }\n  const dataBits = fs.readFileSync(processedPath)\n  let data // actually, would love 'const', but need to set inside try block and don'w want to expand scope of the try.\n  try {\n    data = JSON.parse(dataBits)\n  }\n  catch (e) {\n    if (e instanceof SyntaxError) {\n      throw new SyntaxError(`${e.message} while processing ${filePath}`)\n    }\n  }\n\n  if (rememberSource) {\n    setSource(data, filePath)\n  }\n\n  for (const mntSpec of getMountSpecs(data) || []) {\n    const { dataFile, dataDir, mountPoint, finalKey } = processMountSpec(mntSpec, data)\n    if (dataFile) {\n      const subData = readFJSON(dataFile)\n\n      mountPoint[finalKey] = subData\n    }\n    else { // 'dataDir' is good because we expect processMountSpec() to raise an exception if neither specified.\n      const mntObj = {}\n      mountPoint[finalKey] = mntObj\n\n      const files = fs.readdirSync(dataDir, { withFileTypes : true })\n        .filter(item => !item.isDirectory() && jsonRE.test(item.name))\n        .map(item => item.name) // note 'name' is the simple/basename, not the whole path.\n\n      for (const dirFile of files) {\n        const mntPnt = dirFile.replace(jsonRE, '')\n        const subData = readFJSON(path.join(dataDir, dirFile))\n        mntObj[mntPnt] = subData\n      }\n    }\n  }\n\n  for (const lnkSpec of getLinkSpecs(data) || []) {\n    const { finalRef, source, keyName, penultimateRef, finalKey } = processLinkSpec(lnkSpec, data)\n\n    const getRealItem = (soure, keyName, key) =>\n      source.find((candidate) => candidate[keyName] === key)\n        || throw new Error(`Cannot find link '${key}' in '${lnkSpec.linkTo}'.`)\n\n    if (Array.isArray(finalRef)) { // replace the contents\n      const realItems = finalRef.map((key) => getRealItem(source, keyName, key))\n      finalRef.splice(0, finalRef.length, ...realItems)\n    }\n    else if (typeof finalRef === 'object') {\n      for (const key of Object.keys(finalRef)) {\n        finalRef[key] = getRealItem(source, keyName, key)\n      }\n    }\n    else { // it's a single key\n      penultimateRef[finalKey] = getRealItem(source, keyName, finalRef)\n    }\n  }\n\n  return data\n}\n\n/**\n* Set's the meta source information.\n*/\nconst setSource = (data, filePath) => {\n  const myMeta = ensureMyMeta(data)\n  myMeta.sourceFile = filePath\n}\n\n/**\n* Writes a standard or federated JSON file by analysing the objects meta data and breaking the saved files up\n* accourding to the configuration.\n*/\nconst writeFJSON = (data, filePath) => {\n  if (filePath === undefined) {\n    const myMeta = getMyMeta(data)\n    filePath = myMeta && myMeta.sourceFile\n  }\n  if (!filePath) {\n    throw new Error('No explicit filePath provided and no source found in object meta data.')\n  }\n\n  const mountSpecs = getMountSpecs(data)\n  if (mountSpecs) {\n    for (const mntSpec of mountSpecs) {\n      const { dataFile, dataDir, mountPoint, finalKey } = processMountSpec(mntSpec, data)\n\n      const subData = mountPoint[finalKey]\n      mountPoint[finalKey] = null\n      if (dataFile) {\n        writeFJSON(subData, dataFile)\n      }\n      else { // processMountSpec will raise an exception if neither dataFile nor dataDir is defined.\n        // We don't bother to test what 'dataDir' is. If it exists, we won't overwrite, so the subsequent attempt to\n        // write a file into it can just fail if it's not of an appropriate type.\n        fs.existsSync(dataDir) || fs.mkdirSync(dataDir)\n\n        for (const subKey of Object.keys(subData)) {\n          writeFJSON(subData[subKey], path.join(dataDir, `${subKey}.json`))\n        }\n      }\n    }\n  }\n\n  const dataString = JSON.stringify(data)\n  const processedPath = envTemplateString(filePath)\n  fs.writeFileSync(processedPath, dataString)\n}\n\nconst getMyMeta = (data) => data._meta && data._meta[FJSON_META_DATA_KEY]\n\nconst ensureMyMeta = (data) => {\n  let myMeta = getMyMeta(data)\n  if (!myMeta) {\n    if (data._meta === undefined) { data._meta = {} }\n    if (data._meta[FJSON_META_DATA_KEY] === undefined) { data._meta[FJSON_META_DATA_KEY] = {} }\n    myMeta = getMyMeta(data)\n  }\n\n  return myMeta\n}\n\n/**\n* Internal function to test for and extract mount specs from the provided JSON object.\n*/\nconst getMountSpecs = (data) => getMyMeta(data)?.mountSpecs\n\n/**\n* Internal function to process a mount spec into useful components utilized by the `readFJSON` and `writeFJSON`.\n*/\nconst processMountSpec = (mntSpec, data) => {\n  let { dataPath, dataFile, dataDir } = mntSpec\n\n  dataFile && dataDir // eslint-disable-line no-unused-expressions\n    && throw new Error(`Bad mount spec; cannot specify both data file (${dataFile}) and directory (${dataDir})`)\n  !dataFile && !dataDir // eslint-disable-line no-unused-expressions\n    && throw new Error('Bad mount spec; neither data file nor directory.')\n\n  dataFile && (dataFile = envTemplateString(dataFile))\n  dataDir && (dataDir = envTemplateString(dataDir))\n\n  const { penultimateRef: mountPoint, finalKey } = processJSONPath(dataPath, data)\n\n  return { dataFile, dataDir, mountPoint, finalKey }\n}\n\n/**\n* Internal function to test for and extract link specs from the provided JSON object.\n*/\nconst getLinkSpecs = (data) => getMyMeta(data)?.linkSpecs\n\n/**\n* Internal function to process a link spec into useful components utilized by the `readFJSON` and `writeFJSON`.\n*/\nconst processLinkSpec = (lnkSpec, data) => {\n  const { linkRefs, linkTo, linkKey: keyName } = lnkSpec\n\n  const { finalRef, penultimateRef, finalKey } = processJSONPath(linkRefs, data)\n  const { finalRef: source } = processJSONPath(linkTo, data)\n\n  return { finalRef, source, keyName, penultimateRef, finalKey }\n}\n\nconst processJSONPath = (path, data) => {\n  if (!path) {\n    throw new Error(\"No 'dataPath' specified for mount spec mount point.\")\n  }\n  const pathTrail = path.split('/')\n  const finalKey = pathTrail.pop()\n\n  let penultimateRef = data // not necessarily penultimate yet, but will be...\n  for (const key of pathTrail) {\n    penultimateRef = penultimateRef[key]\n  }\n\n  return {\n    finalRef : penultimateRef[finalKey],\n    penultimateRef,\n    finalKey\n  }\n}\n\n// aliases for 'import * as fjson; fjson.write()' style\nconst write = writeFJSON\nconst read = readFJSON\n\nexport {\n  addMountPoint, readFJSON, setSource, writeFJSON, // standard interface\n  FJSON_META_DATA_KEY, // possibly useful? may be removed before '1.0'\n  write, read // aliases\n}\n"],"names":["replaceRE","envTemplateString","path","origPath","matches","matchAll","length","reverse","matchInfo","match","key","value","process","env","matchStart","index","undefined","Error","substring","FJSON_META_DATA_KEY","addMountPoint","data","dataPath","dataFile","mountSpecs","getMountSpecs","myMeta","ensureMyMeta","i","findIndex","el","mountSpec","push","jsonRE","readFJSON","filePath","options","rememberSource","processedPath","fs","msg","dataBits","JSON","parse","e","SyntaxError","message","setSource","mntSpec","processMountSpec","dataDir","mountPoint","finalKey","subData","mntObj","files","withFileTypes","filter","item","isDirectory","test","name","map","dirFile","mntPnt","replace","getLinkSpecs","lnkSpec","processLinkSpec","finalRef","source","keyName","penultimateRef","getRealItem","soure","find","candidate","linkTo","Array","isArray","realItems","splice","_typeof","Object","keys","sourceFile","writeFJSON","getMyMeta","subKey","dataString","stringify","_meta","processJSONPath","linkSpecs","linkRefs","linkKey","pathTrail","split","pop","write","read"],"mappings":"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"}