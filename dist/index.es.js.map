{"version":3,"file":"index.es.js","sources":["../src/federated-json.js"],"sourcesContent":["/**\n* Library that builds a single JSON object from multiple JSON files. As each file is loaded, we check\n* `_meta/com.liquid-labs.federated-data/mountSpecs`. Each spec consists of a `dataPath` and `dataFile` element. The\n* data path is split on '/' and each element is treated as a string. Therefore, the path is compatible with object keys\n* but does not support arrays.\n*/\nimport * as fs from 'fs'\n\nconst DATA_SPACE_KEY = 'com.liquid-labs.federated-data'\n\nconst readFJSON = (filePath) => {\n  const dataBits = fs.readFileSync(filePath)\n  const data = JSON.parse(dataBits)\n\n  const mountSpecs = getMountSpecs(data)\n  if (mountSpecs) {\n    for (const mntSpec of mountSpecs) {\n      const { dataFile, mountPoint, finalKey } = processMountSpec(mntSpec)\n      const subData = readFJSON(dataFile)\n\n      mountPoint[finalKey] = subData\n    }\n  }\n\n  return data\n}\n\nconst writeFJSON = (filePath, data) => {\n  const mountSpecs = getMountSpecs(data)\n  if (mountSpecs) {\n    for (const mntSpec of mountSpecs) {\n      const { mountPoint, finalKey } = processMountSpec(mntSpec, data)\n\n      const subData = mountPoint[finalKey]\n      mountPoint[finalKey] = null\n\n      writeFJSON(mntSpec.dataFile, subData)\n    }\n  }\n\n  const dataString = JSON.stringify(data)\n  fs.writeFileSync(filePath, dataString)\n}\n\nconst getMountSpecs = (data) =>\n  data._meta && data._meta[DATA_SPACE_KEY] && data._meta[DATA_SPACE_KEY].mountSpecs\n\nconst processMountSpec = (mntSpec, data) => {\n  const { dataPath, dataFile } = mntSpec\n\n  const pathTrail = dataPath.split()\n  const finalKey = pathTrail.pop()\n\n  let mountPoint = data\n  for (const key of pathTrail) {\n    mountPoint = mountPoint[key]\n  }\n\n  return { dataFile, mountPoint, finalKey }\n}\n\nexport { readFJSON, writeFJSON }\n"],"names":["DATA_SPACE_KEY","readFJSON","filePath","dataBits","fs","data","JSON","parse","mountSpecs","getMountSpecs","mntSpec","processMountSpec","dataFile","mountPoint","finalKey","subData","writeFJSON","dataString","stringify","_meta","dataPath","pathTrail","split","pop","key"],"mappings":";;;;;;;AAQA,IAAMA,cAAc,GAAG,gCAAvB;;IAEMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;AAC9B,MAAMC,QAAQ,GAAGC,YAAA,CAAgBF,QAAhB,CAAjB;AACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAb;AAEA,MAAMK,UAAU,GAAGC,aAAa,CAACJ,IAAD,CAAhC;;AACA,MAAIG,UAAJ,EAAgB;AAAA,+CACQA,UADR;AAAA;;AAAA;AACd,0DAAkC;AAAA,YAAvBE,OAAuB;;AAAA,gCACWC,gBAAgB,CAACD,OAAD,CAD3B;AAAA,YACxBE,QADwB,qBACxBA,QADwB;AAAA,YACdC,UADc,qBACdA,UADc;AAAA,YACFC,QADE,qBACFA,QADE;;AAEhC,YAAMC,OAAO,GAAGd,SAAS,CAACW,QAAD,CAAzB;AAEAC,QAAAA,UAAU,CAACC,QAAD,CAAV,GAAuBC,OAAvB;AACD;AANa;AAAA;AAAA;AAAA;AAAA;AAOf;;AAED,SAAOV,IAAP;AACD;;IAEKW,UAAU,GAAG,SAAbA,UAAa,CAACd,QAAD,EAAWG,IAAX,EAAoB;AACrC,MAAMG,UAAU,GAAGC,aAAa,CAACJ,IAAD,CAAhC;;AACA,MAAIG,UAAJ,EAAgB;AAAA,gDACQA,UADR;AAAA;;AAAA;AACd,6DAAkC;AAAA,YAAvBE,OAAuB;;AAAA,iCACCC,gBAAgB,CAACD,OAAD,EAAUL,IAAV,CADjB;AAAA,YACxBQ,UADwB,sBACxBA,UADwB;AAAA,YACZC,QADY,sBACZA,QADY;;AAGhC,YAAMC,OAAO,GAAGF,UAAU,CAACC,QAAD,CAA1B;AACAD,QAAAA,UAAU,CAACC,QAAD,CAAV,GAAuB,IAAvB;AAEAE,QAAAA,UAAU,CAACN,OAAO,CAACE,QAAT,EAAmBG,OAAnB,CAAV;AACD;AARa;AAAA;AAAA;AAAA;AAAA;AASf;;AAED,MAAME,UAAU,GAAGX,IAAI,CAACY,SAAL,CAAeb,IAAf,CAAnB;AACAD,EAAAA,aAAA,CAAiBF,QAAjB,EAA2Be,UAA3B;AACD;;AAED,IAAMR,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,IAAD;AAAA,SACpBA,IAAI,CAACc,KAAL,IAAcd,IAAI,CAACc,KAAL,CAAWnB,cAAX,CAAd,IAA4CK,IAAI,CAACc,KAAL,CAAWnB,cAAX,EAA2BQ,UADnD;AAAA,CAAtB;;AAGA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,OAAD,EAAUL,IAAV,EAAmB;AAAA,MAClCe,QADkC,GACXV,OADW,CAClCU,QADkC;AAAA,MACxBR,QADwB,GACXF,OADW,CACxBE,QADwB;AAG1C,MAAMS,SAAS,GAAGD,QAAQ,CAACE,KAAT,EAAlB;AACA,MAAMR,QAAQ,GAAGO,SAAS,CAACE,GAAV,EAAjB;AAEA,MAAIV,UAAU,GAAGR,IAAjB;;AAN0C,8CAOxBgB,SAPwB;AAAA;;AAAA;AAO1C,2DAA6B;AAAA,UAAlBG,GAAkB;AAC3BX,MAAAA,UAAU,GAAGA,UAAU,CAACW,GAAD,CAAvB;AACD;AATyC;AAAA;AAAA;AAAA;AAAA;;AAW1C,SAAO;AAAEZ,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,UAAU,EAAVA,UAAZ;AAAwBC,IAAAA,QAAQ,EAARA;AAAxB,GAAP;AACD,CAZD;;;;"}